/*
 * <copyright>
 *  Copyright 1997-2001 BBNT Solutions, LLC
 *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.
 * </copyright>
 */

package org.cougaar.util;

// soon to move to "org.cougaar.util.Trigger":
import org.cougaar.util.Trigger;

/**
 * A simple "registry" API for triggers, which is used by 
 * implementations of <code>TriggerModel</code>.
 */
public interface TriggerRegistry {
  
  /**
   * Register a client trigger, returning a "registryTrigger"
   * for the client to use.
   * <p>
   * <em>IMPORTANT:</em><br>
   * The <code>org.cougaar.util.SyncTriggerModelImpl</code>
   * should be used to wrap the returned "registryTrigger".
   * The SyncTriggerModelImpl is internally synchronized to 
   * only run one "clientTrigger.trigger()" at a time, and to
   * buffer up triggers for more efficient scheduler use.
   * Additionally the TriggerModel includes "suspend()" and
   * "resume()" support that is required to correctly 
   * implement client state transitions.
   * <p>
   * Without that wrapping it is possible for the "clientTrigger" 
   * to be invoked in parallel under some TriggerRegistry
   * implementations.  Minimally this would require the
   * "clientTrigger.trigger()" to be synchronized.
   *
   * @return a "registryTrigger" that the caller can use to tell
   *   the trigger-registry that it wants to be 
   *   "clientTrigger.trigger()"ed.
   */
  Trigger register(Trigger clientTrigger);

  /**
   * Release a register Trigger that was generated by 
   * <tt>register(..)</tt>.
   */
  void unregister(Trigger registryTrigger);

}
