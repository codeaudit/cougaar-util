/*
 * <copyright>
 *  
 *  Copyright 1997-2004 BBNT Solutions, LLC
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 * 
 *  You can redistribute this software and/or modify it under the
 *  terms of the Cougaar Open Source License as published on the
 *  Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 * </copyright>
 */

package org.cougaar.util;

// soon to move to "org.cougaar.util.Trigger":

/**
 * A simple "registry" API for triggers, which is used by 
 * implementations of <code>TriggerModel</code>.
 */
public interface TriggerRegistry {
  
  /**
   * Register a client trigger, returning a "registryTrigger"
   * for the client to use.
   * <p>
   * <em>IMPORTANT:</em><br>
   * The <code>org.cougaar.util.SyncTriggerModelImpl</code>
   * should be used to wrap the returned "registryTrigger".
   * The SyncTriggerModelImpl is internally synchronized to 
   * only run one "clientTrigger.trigger()" at a time, and to
   * buffer up triggers for more efficient scheduler use.
   * Additionally the TriggerModel includes "suspend()" and
   * "resume()" support that is required to correctly 
   * implement client state transitions.
   * <p>
   * Without that wrapping it is possible for the "clientTrigger" 
   * to be invoked in parallel under some TriggerRegistry
   * implementations.  Minimally this would require the
   * "clientTrigger.trigger()" to be synchronized.
   *
   * @return a "registryTrigger" that the caller can use to tell
   *   the trigger-registry that it wants to be 
   *   "clientTrigger.trigger()"ed.
   */
  Trigger register(Trigger clientTrigger);

  /**
   * Release a register Trigger that was generated by 
   * <tt>register(..)</tt>.
   */
  void unregister(Trigger registryTrigger);

}
