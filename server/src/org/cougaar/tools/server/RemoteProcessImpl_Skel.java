// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.cougaar.tools.server;

public final class RemoteProcessImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void destroy()"),
	new java.rmi.server.Operation("int exitValue()"),
	new java.rmi.server.Operation("java.lang.String getCommand()[]"),
	new java.rmi.server.Operation("java.lang.String getName()"),
	new java.rmi.server.Operation("boolean isAlive()"),
	new java.rmi.server.Operation("int waitFor()")
    };
    
    private static final long interfaceHash = 5018915699058490520L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 6818594404755407126L) {
		opnum = 0;
	    } else if (hash == -3935870581653384007L) {
		opnum = 1;
	    } else if (hash == 4646401821665848397L) {
		opnum = 2;
	    } else if (hash == 6317137956467216454L) {
		opnum = 3;
	    } else if (hash == -7806089699036536482L) {
		opnum = 4;
	    } else if (hash == -8338822390347708385L) {
		opnum = 5;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	org.cougaar.tools.server.RemoteProcessImpl server = (org.cougaar.tools.server.RemoteProcessImpl) obj;
	switch (opnum) {
	case 0: // destroy()
	{
	    call.releaseInputStream();
	    server.destroy();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // exitValue()
	{
	    call.releaseInputStream();
	    int $result = server.exitValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // getCommand()
	{
	    call.releaseInputStream();
	    java.lang.String[] $result = server.getCommand();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getName()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.getName();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // isAlive()
	{
	    call.releaseInputStream();
	    boolean $result = server.isAlive();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // waitFor()
	{
	    call.releaseInputStream();
	    int $result = server.waitFor();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
