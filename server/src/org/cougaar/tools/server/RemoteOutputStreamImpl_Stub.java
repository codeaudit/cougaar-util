// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.cougaar.tools.server;

public final class RemoteOutputStreamImpl_Stub
    extends java.rmi.server.RemoteStub
    implements org.cougaar.tools.server.RemoteOutputStream, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("void write(org.cougaar.tools.server.RemoteOutputStream.ByteArray)")
    };
    
    private static final long interfaceHash = -3853296237394704472L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_close_0;
    private static java.lang.reflect.Method $method_write_1;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_close_0 = org.cougaar.tools.server.RemoteOutputStream.class.getMethod("close", new java.lang.Class[] {});
	    $method_write_1 = org.cougaar.tools.server.RemoteOutputStream.class.getMethod("write", new java.lang.Class[] {org.cougaar.tools.server.RemoteOutputStream.ByteArray.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public RemoteOutputStreamImpl_Stub() {
	super();
    }
    public RemoteOutputStreamImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of close()
    public void close()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_close_0, null, -4742752445160157748L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of write(RemoteOutputStream.ByteArray)
    public void write(org.cougaar.tools.server.RemoteOutputStream.ByteArray $param_RemoteOutputStream$ByteArray_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_write_1, new java.lang.Object[] {$param_RemoteOutputStream$ByteArray_1}, -7503023837992041611L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_RemoteOutputStream$ByteArray_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
