// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.cougaar.tools.server;

public final class RemoteALPServerImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("org.cougaar.tools.server.RemoteProcess createNode(java.lang.String, java.util.Properties, java.lang.String[], org.cougaar.tools.server.RemoteOutputStream, org.cougaar.tools.server.RemoteOutputStream)"),
	new java.rmi.server.Operation("boolean destroyNode(java.lang.String)"),
	new java.rmi.server.Operation("int getNodeCount()"),
	new java.rmi.server.Operation("java.util.Collection getNodes()"),
	new java.rmi.server.Operation("void reset()")
    };
    
    private static final long interfaceHash = 2150617389876796038L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 4812093566473888825L) {
		opnum = 0;
	    } else if (hash == 7159991675886862877L) {
		opnum = 1;
	    } else if (hash == -237585700862737706L) {
		opnum = 2;
	    } else if (hash == 5013611610657350701L) {
		opnum = 3;
	    } else if (hash == 7419395615006395270L) {
		opnum = 4;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	org.cougaar.tools.server.RemoteALPServerImpl server = (org.cougaar.tools.server.RemoteALPServerImpl) obj;
	switch (opnum) {
	case 0: // createNode(String, Properties, String[], RemoteOutputStream, RemoteOutputStream)
	{
	    java.lang.String $param_String_1;
	    java.util.Properties $param_Properties_2;
	    java.lang.String[] $param_arrayOf_String_3;
	    org.cougaar.tools.server.RemoteOutputStream $param_RemoteOutputStream_4;
	    org.cougaar.tools.server.RemoteOutputStream $param_RemoteOutputStream_5;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Properties_2 = (java.util.Properties) in.readObject();
		$param_arrayOf_String_3 = (java.lang.String[]) in.readObject();
		$param_RemoteOutputStream_4 = (org.cougaar.tools.server.RemoteOutputStream) in.readObject();
		$param_RemoteOutputStream_5 = (org.cougaar.tools.server.RemoteOutputStream) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    org.cougaar.tools.server.RemoteProcess $result = server.createNode($param_String_1, $param_Properties_2, $param_arrayOf_String_3, $param_RemoteOutputStream_4, $param_RemoteOutputStream_5);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // destroyNode(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.destroyNode($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // getNodeCount()
	{
	    call.releaseInputStream();
	    int $result = server.getNodeCount();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getNodes()
	{
	    call.releaseInputStream();
	    java.util.Collection $result = server.getNodes();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // reset()
	{
	    call.releaseInputStream();
	    server.reset();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
