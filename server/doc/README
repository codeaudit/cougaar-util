This document describes the COUGAAR Application-Server.

Also included in this directory are sample "*.props" files
for running Nodes, which are documented below.


The Application-Server ("AppServer") is used to spawn COUGAAR 
Nodes from a remote Console.  The AppServer is started on a 
machine as an independent process and listens for remote clients.
Remote clients contact the AppServer (via RMI) and can:

  - Start Nodes.
  
  - Listen for StdOut/StdErr and other output from the Node,
      which is buffered within the AppServer for efficiency.
      
  - Interact with a running Node.
  
  - Kill running Nodes.
  
  - Perform simple accesses of the filesystem (list the contents 
      of a directory, read the contents of a file, etc).
    
  - Perform other soon-to-be-added features (trigger a thread-dump
      of a running Node's JVM, list the running processes, etc).

A remote client may interact with multiple AppServers to launch 
a distributed application (such as a distributed COUGAAR society).


Currently there is little security built into the AppServer.  In the
future RMI-SSL may be used, plus a custom SecurityManager and other
enhancements, but for now *RUN AT YOUR OWN RISK*!!!


There is a simple UI console included with the AppServer:
  "org.cougaar.tools.server.Console".
It is intended as an example and testing-tool -- see the CSMART 
documentation for a full-fledged UI Console that uses the AppServer.  
This document concentrates on the AppServer configuration details.


The AppServer must be started before the remote client and is
an independent process.  To run the server:

  <java> [<jvmProps>] [<serverProps>] <classname> [<appProps>]
  
where:

  <java> is your JVM's executable.

  <jvmProps> include the "-classpath <path>" and other JVM-specific
    arguments.  This is *only* used for loading the AppServer.

  <serverProps> are "-Dorg.cougaar.tools.server.*" system properties,
    such as "-Dorg.cougaar.tools.server.verbose=true".  This is 
    *only* used for configuring the AppServer.  See below for details.

  <classname> is "org.cougaar.tools.server.NodeServer".
  
  <appProps> are either ".props" file names, such as the example
    "unix-server-sample.props", or "-D" properties for the Node,
    such as "-Dorg.cougaar.install.path=/opt/cougaar".  See below for 
    details.

The AppServer may be started at a system prompt or as part of
system start-up (Windows "autoexec.bat" file, Unix "init.d" daemon, 
etc).


The server properties default to reasonable values, but they can 
be specified on the command-line.  They are:

 "-Dorg.cougaar.tools.server.verbose=BOOLEAN"
      Provide verbose AppServer output, defaults to "false".

 "-Dorg.cougaar.tools.server.loadDefaultProps=BOOLEAN"
      Automatically load "Common.props" and "{OSNAME}.props" 
      (e.g. "Windows.props"), defaults to "false".

 "-Dorg.cougaar.tools.server.host=STRING"
      Host for the RMI registry, defaults to "localhost".

 "-Dorg.cougaar.tools.server.port=INTEGER"
      Port for the RMI registry, defaults to "8484".

 "-Dorg.cougaar.tools.server.name=STRING"
      Name for the RMI registry entry, defaults to "ServerHook".

 "-Dorg.cougaar.tools.server.temp.path=STRING"
      Base path for application file list/read, defaults to ".".


The application properties are specified in this order:

  1) If "loadDefaultProps" was defined as "true" then a couple
     "default" ".props" files are loaded -- by default this is
     *not* done.  First "Common.props" is loaded.  Next the 
     "{OSNAME}.props" files are loaded.  Under Linux this loads 
     "Linux.props".  Under WindowsNT this loads "Windows.props" and 
     "Windows_NT.props".

  2) Next the AppServer's command-line arguments are loaded
     in order.  Arguments that start with "-D" are set as
     properties, and all other arguments are loaded as ".props"
     files.

  3) Lastly the remote client can override these properties
     when starting a Node.  This is typically used to define
     the Node's name and other per-Node-specific properties.

Together these properties define *all* the properties used to 
start a Node.  The AppServer is intended to be a generic
application launcher, so all COUGAAR-specific properties must
be explicitly specified.  Note that the system properties and shell
environment used to start the AppServer are *not* passed to the
running Nodes.

Property files ("*.props)" must follow the "java.util.Properties"
syntax.  Some characters must be "escaped" -- for example, on
Windows machines one must write the path "c:\a\b" as 
"c\:\\a\\b".  Properties must not include whitespace.  See the
example "../data/win-server-sample.props" and 
"../data/unix-server-sample.props".


The Node properties follow this format:

  "java.*" properties are JVM properties:

    "java.jvm.program=NAME" which defaults to "java"
    "java.jvm.green=BOOLEAN" for "-green" threading (which 
        defaults to false)
    "java.jvm.mode=NAME" (-classic, -hotspot, etc)
    "java.class.path=PATH" for "-classpath PATH".  This must
        be specified and is not inherited from the AppServer.
    "java.class.name=NAME" for the classname, which defaults to 
        "org.cougaar.core.society.Node")
    "java.X*" for the "-X*" parameters (for example,
        "java.Xms100m" translates to "-Xms100m").
    "java.java.*" to preserve a "-Djava.*" property (for example,
        "java.java.foo=bar" translates to "-Djava.foo=bar").

  "env.*" properties are system environment properties.  These
  are typically operating-system specific:

    "env.DISPLAY=HOST:x.y" for setting a XDisplay.  Note that
        you must do "xhost +serverhost" to allow these XEvents
        to popup on your remote client's display.  This is true
        even if both the AppServer and client are on the same
        machine.
    "env.SYSTEMROOT=PATH" is an example system environment 
        variable that may be required by third-party jars.
    "env.env.*" to preserve a "-Denv.*" property (for example,
        "env.env.foo=bar" translates to "-Denv.foo=bar").

  All other properties are passed as "-D" system properties.
  For example, "org.cougaar.node.name=3ID" is passed as
  "-Dorg.cougaar.node.name=3ID".

The remote client can also pass command-line arguments, but
for COUGAAR these are not used.


If a remote client starts a Node and later becomes disconnected,
either due to the client shut-down or an I/O failure, the 
AppServer will automatically destroy the running Node.


The stand-alone AppServer jar is currently broken -- for now the
AppServer depends upon a couple "core.jar" classes.  Once this has
been fixed one will be able to do:
        java -jar server.jar [<site.props> ...]
or (if your system allows jar file execution):
        server.jar [<site.props> ..]

