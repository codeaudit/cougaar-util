COUGAAR demonstration security details

I. COUGAAR demonstration may run on IPSec - essentially a secured
"intranet" for the demonstration society.

II. COUGAAR infrastructure can be told to use a MessageSecurityManager,
which can sign or even encrypt all messages (e.g. one might use an
encrypting MSM if it wasn't going to be running on top of IPSec).

  A. the MSM to use is specified by the system property
  org.cougaar.core.security.  For instance, to activate the "signing" MSM,
  the VM would be started with:
	-Dorg.cougaar.core.message.security=org.cougaar.core.society.SignedMessageSecurityManager

  B. There is a test MSM in the same package as the real one called
	org.cougaar.core.society.DummyMessageSecurityManager
  this MSM simply encapsulates the real message inside an opaque
  wrapper.  No authentication or integrity checks are done.

  C. The SignedMSM uses keys stored in the config file .keystore
  (org.cougaar.core.security.keystore) with the password "alpalp"
  (org.cougaar.core.security.keystore.password).  Each cluster should have
  a keypair in the keystore with an alias == it's clusterID
  (e.g. 3ID).  The keypair passwords are assumed to be the same as the
  keystore passwords.  Clearly, this is not actually a secure scheme,
  since the passwords are well-known and the whole store is (in the
  demo) available to every member of the society.  However, this sets
  the pattern for an arbitrary-strength authentication scheme: simply
  by changing the keystore password, and only having the cluster-local 
  private keys available in the local store would go a long way.  Use
  of a full CA-chain-based authentication scheme is a logical
  extension, as would be point-to-point encryption (only the
  destination cluster can authenticate a message).

  D. the minitestconfig keystore was generated by the following
  commands:
    keytool -keystore .keystore -storepass alpalp -genkey -alias alpine \
	-validity 1000 -dname "cn=Alpine, o=Alpine" -keypass alpalp
    keytool -keystore .keystore -storepass alpalp -genkey \
	-alias 1BDE -keypass alpalp \
	-validity 1000 -dname "cn=1BDE"
    keytool -keystore .keystore -storepass alpalp -genkey \
	-alias 3-69-ARBN -keypass alpalp \
	-validity 1000 -dname "cn=3-69-ARBN"
    keytool -keystore .keystore -storepass alpalp -genkey \
	-alias MCCGlobalMode -keypass alpalp \
	-validity 1000 -dname "cn=MCCGlobalMode"
    keytool -keystore .keystore -storepass alpalp -genkey \
	-alias 3ID -keypass alpalp \
	-validity 1000 -dname "cn=3ID"

III.  Plugin Jar files will be signed and authenticated.  For
demonstration purposes, jar files will be signed and authenticated
using the alpine certificate as above.  For example:
	jarsigner -keystore alp/configs/.keystore alpine.jar
and then use alpalp as the password.  Note that alpine will be signing 
the plugin jar files for the demo.

PlugIn code is searched for in the following locations (in order):
	AIP/lib/*		always trusted.
	AIP/plugins/*		must be signed.
	AIP/PRODUCT/lib/*	trusted iff loaded in the context of a
				PRODUCT.jar from the plugins directory.
	CLASSPATH		trusted, but should be kept small.

where "AIP" is the alp install path, and PRODUCT is a product name
(e.g. "alpine").
Behavior of the plugin class loader is controllable via the following
system properties:
	org.cougaar.core.security.plugin.check	Only load trusted plugins.
	org.cougaar.core.security.plugin.debug	Print additional information
					about plugin security while
					verifying.
	org.cougaar.core.security.plugin.quiet	Be quiet about authentication
					problems - if check is true,
					this setting is forced to be
					false.

All of the plugin security settings default to false.
			
	



