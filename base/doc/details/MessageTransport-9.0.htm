<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (X11; U; Linux 2.4.2-2 i686) [Netscape]">
   <title> Message Transport 8.4 Release Notes</title>
</head>
<body>

<h2>
Message Transport 9.0 Release Notes</h2>

<hr ALIGN=LEFT WIDTH="50%">
<h3>
1.&nbsp; Overview:</h3>

<blockquote>The Cougaar Message Transport is a Node level service that
handles transport of messages for all inter-agent and inter-node communication.
It comprises a series of message processing stations which control the
flow of messages, along with Link Protocols which handle various kinds
of inter-Node message delivery, as well as
<br>adaptive code delegation provided at runtime by "aspects".
<p>The MTS components are described in much more detail in Cougaar Development
Guide.
<p>Some of the features that can be added include: Performance and Adaptivity
(BBN QuO), Dynamic Agents (BBN), Dependability (OBJS) and Security (NAI).</blockquote>

<h3>
2.&nbsp; MTS and the Component Model</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The
MessageTrsnportServiceProvider is a Component of Node.
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
In addition to provideing Message Transport Service, MessageTransportServiceProvider,
it also provides Message Statistics Service,
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
MessageWatcher Service and and Age&nbsp;&nbsp;&nbsp; nt Status Service.
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
MessageTransportServiceProvider is also a Container. Its components are
Aspects (Section 3) and LinkProtocols. The BindingSite is
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
MTSBinder; Binder instances are&nbsp;&nbsp; produced MTSBinderFactory.
As other Cougaar Components, Aspect and Link Protocol instances
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
have full access to any Services provided by Siblings, by the MTS&nbsp;
itself(NameSUpport, MessageTransportRegistryService, AspectSupport),
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
and by Node.
<h3>
3.&nbsp;&nbsp; Running an Aspect for&nbsp; Message Transport:</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The Node script must be modified
to enable the new <b>Message Transport Aspects,Link Protocols, and debugging.</b>
<br>&nbsp;
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1&nbsp;&nbsp;&nbsp;
Aspects:</b>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
To specify which Aspects to load, set the Java system property org.cougaar.message.transport.aspects
(See AspectSupportImpl.java).
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
The following Aspects are&nbsp; always&nbsp; loaded: <b>Watcher, Multicast,
and AgentStatus, Flush.</b>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<i><b>COUGAAR_JAVA_ARGS</b>="-Dorg.cougaar.message.transport.aspects=org.cougaar.core.mts.TraceAspect,org.cougaar.core.mts.StatisticsAspect"</i>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Dynamically loadable Aspects i</b>ncluded in Cougaar 9.0 are: (from
org.cougaar.core.mts package)
<br>&nbsp;
<table BORDER WIDTH="100%" NOSAVE >
<tr>
<td>A<b>spects</b></td>

<td><b>Properties</b></td>
</tr>

<tr>
<td><b>FlushAspect&nbsp;</b></td>

<td>Handles the call to flush by trying sending of messages rightaway</td>
</tr>

<tr>
<td><b>ForwardMessageLoggingAspect</b></td>

<td>Logs interesting fields of received messages, in tab-separated format</td>
</tr>

<tr>
<td><b>SecurityAspect</b></td>

<td>Provides message-level security by enabling message signing.&nbsp;</td>
</tr>

<tr>
<td><b>SerializationAspect</b>:</td>

<td>Enorces loopback link protocol to serialize all messages.&nbsp;</td>
</tr>

<tr>
<td><b>StatisticsAspect:</b></td>

<td>Collects message transport statistics. This is used by the metric services
PSP.</td>
</tr>

<tr>
<td><b>TraceAspect&nbsp;</b></td>

<td>Prints out messages as they move through the message transport stations.
This is used for debugging the message transport.</td>
</tr>

<tr>
<td><b>TrafficMaskingGenerationAspect</b></td>

<td>Generates traffic to mask real cougaar message traffic patterns every
33ms.&nbsp; This time can be changed by <i>org.cougaar.message.trafficGenerator.replyThinkTime</i>
property.</td>
</tr>

<tr>
<td><b>ScrambleAspcet&nbsp;</b></td>

<td>Scrambles a message sequence</td>
</tr>

<tr>
<td><b>SequenceAspect&nbsp;</b></td>

<td>Ensures that messages are delivered in right sequence</td>
</tr>

<tr>
<td><b>StubDumperAspect&nbsp;</b></td>

<td>Dumps the rmi stub, used for debugging</td>
</tr>

<tr>
<td><b>StepperAspect&nbsp;</b></td>

<td>Provides fine-grained control as to when each message will be sent
after it is generated.&nbsp;&nbsp; That is, it allows a pausing mechanism
after each message is generated.</td>
</tr>
</table>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Additional aspects from the org.cougaar.lib.quo package. QuoCougaar.jar
must be on the 3rd party class path.
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Moreover,<b> other Aspects from OBJS, NAI have not been described here.</b>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Examples of other Aspects from</b>
<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
OBJS :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>MessageAckingAspect
,&nbsp;<b> </b>ShowTrafficAspect ,&nbsp;<b>&nbsp;</b> MessageSendHistpryAspect,
ChangeCostAspect
<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
NAI:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>
AccessCnontrolAspect, SecurityAspect, CryptoAspect
<br>&nbsp;
<h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.2&nbsp; Loading Link Protocols:</h3>

<blockquote>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To specify which
Link Protocols to load, set the Java system property <b>org.cougaar.message.protocol.classes
</b>(See
LinkProtocolFactory.java).
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If no Link Protocols are
specified, the RMI and LoopBack protocols are loaded by default.
<p><i><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COUGAAR_JAVA_ARGS</b>="-Dorg.cougaar.message.protocol.classes=org.cougaar.core.mts.eRMILinkProtocol,org.cougaar.core.mts.LoopbackLinkProtocol"</i>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dynamically loadable Link
Protocols included in Cougaar 8.4 are: (from org.cougaar.core.mts package
<table BORDER WIDTH="100%" NOSAVE >
<caption>&nbsp;</caption>

<tr>
<td><b>Link Protocols</b></td>

<td><b>Properties</b></td>
</tr>

<tr>
<td><b>LoopbackLinkProtocol</b></td>

<td>Sends messages between agents on the same node.</td>
</tr>

<tr>
<td><b>RMILinkProtocol</b></td>

<td>Uses RMI to transport message between&nbsp; nodes.</td>
</tr>

<tr>
<td><b>SSLRMILinkProtocol</b></td>

<td>Uses encrypted RMI to transport messages between nodes.</td>
</tr>

<tr>
<td><b>SerializedRMILinkProtocol</b></td>

<td>Uses RMI to send preserialized messages between nodes.</td>
</tr>

<tr>
<td><b>CorbaLinkProtocol</b></td>

<td>Uses CORBA to send preserialized messages between nodes.</td>
</tr>
</table>
</blockquote>

<h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.3&nbsp; Turning on Debugging</h3>

<blockquote>To specify the level of Message Transport debugging, set the
Java system property <b>org.cougaar.message.transport.debug </b>(see mts.Debug.java).
<br>It can take vales as "<b>aspects", "flush", "comm", "multicast","policy","security","service",
statistics", "watcher" or a comma-separated list of all these options</b>.
<br>&nbsp;It is not case-sensitive and&nbsp; all&nbsp; of the debugging
can be enabled by setting this property to<b> "true" </b>or <b>"all" </b>and
all of the debugging can be disabled by&nbsp; setting this property to
<b>"false"</b> or "<b>none</b>"
<br>&nbsp;
<br><b><i>COUGAAR_JAVA_ARGS="-Dorg.cougaar.message.transport.debug=aspects,security"</i></b>
<p>Please note that The debug options are: aspects, flush, multicast, security,
service, statistics, and watcher.
<br>&nbsp;</blockquote>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.4&nbsp;&nbsp; QuoProxy</b> will pre-serialize
or compress messages based on the bandwidth between nodes.
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> 3.5&nbsp;&nbsp; Example of setting
properties for Adaptivity to threat conditions of society</b>
<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

</b>For further examples of setting these properties, please refer $<b>COUGAAR_INSTALL_PATH/quo/test/bin.</b>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Please note that package <b>quo-dev.zip </b>has to be installed&nbsp; for
viewing these files
<blockquote>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
#Default trust status</blockquote>

<blockquote>
<blockquote><font size=-1># Link Protocols</font>
<br><font size=-1>link = -Dorg.cougaar.message.transport.aspects=org.cougaar.lib.quo.RemoteSSLAspect,</font>
<br><font size=-1>-Dorg.cougaar.message.protocol.classes=org.cougaar.core.mts.SSLRMILinkProtocol,</font>
<br><font size=-1>-Dorg.cougaar.core.mts.RMILinkProtocol,org.cougaar.core.mts.LoopbackLinkProtocol</font>
<p><font size=-1># Aspects</font>
<br><font size=-1>quo=-Dorg.cougaar.message.transport.aspects=org.cougaar.lib.quo.QuoProxyAspect,Dorg.cougaar.lib.quo.RemoteSSLAspect,org.cougaar.lib.quo.TrafficMaskAspect,org.cougaar.core.mts.ForwardMessageLoggingAspect</font>
<p><font size=-1># Debug</font>
<br><font size=-1>debug =-Dorg.cougaar.message.transport.debug=ASPECTS</font>
<p><font size=-1>&nbsp;COUGAAR_JAVA_ARGS="$link $quo $debug"</font>
<br><font size=-1>export COUGAAR_JAVA_ARGS</font>
<br>&nbsp;</blockquote>
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp; 4<b>.&nbsp;&nbsp; Features from Independent groups</b>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.1&nbsp;&nbsp; Performance
and Adaptivity</b>
<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</b>The
Message Transport can adapt to the resource status of society or to policies
specified.&nbsp; For example, it selects between ompression, SSL message
encryption and
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
traffic masking under different threat conditions and network bandwidth.&nbsp;&nbsp;
For details, please see <a href="MTS-Adapt-Demo.htm">Message
Transport Adaptibility Demo document</a>.

<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.2&nbsp;&nbsp; Dynamic
Agents</b>
<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</b>The
mobile agents utilize Message Transport Service for flushing.&nbsp; When
agents move they ensure that all messages backed up should be sent&nbsp;
before they move and
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thus not loose messages in the transit.
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.3&nbsp;&nbsp; Dependability</b>
<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>
If the RMI or CORBA transport fails for reason as one of the communicating
node is down then messages are picked up by email transport.
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.4&nbsp;&nbsp; Security</b>
<br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</b>Provides security features as AccessControl and Cryptograpy.
<blockquote>
<blockquote>&nbsp;
<blockquote>&nbsp;</blockquote>
</blockquote>
</blockquote>

</body>
</html>
