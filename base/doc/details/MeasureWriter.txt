MeasureWriter is a code generator which writes "unitless measure"
class implementations.

For example, the class org.cougaar.domain.planning.ldm.measure.Mass
implements a class which is essentially a wrapper around a double
value which can be initialized in an arbitrary unit of Mass and
retrieved using arbitrary units:

	Mass x = new Mass(24, Mass.KILOGRAMS);
	double lbs = x.getPounds();
	double stons = x.getShortTons();


Measures are usually defined by entries in the "measures.def" file.

Here is the extry for Mass:

[Mass]
extends=Scalar
internal=double
base=grams
baseabbrev=g
units=grams kilograms ounces pounds tons short_tons long_tons
to_ounces=0.035273962
to_pounds=0.0022046226
from_tons=907184.74
from_short_tons=907184.74
from_long_tons=1016046.9
from_kilograms=1000
common=short_tons

"[Mass]" indicates the start of a new class named "Mass".

"extends=Scalar" specifies that the Mass class should directly extend
Scalar rather than the default AbstractMeasure.

"internal=double" specifies that the internal storage to be used is a
double.

"base=grams" specifies that the internally stored value is in grams -
this choice is not visible outside the class except by a slight
performance improvement when working solely with grams units, and that 
the toString() will use the base units.

"baseabbrev=g" specifies an (optional) abbreviation for the base unit
to use while printing values.

"units=..." a space-separated list of units to define.  There must be
at least one "to_x=" or "from_x=" line for each unit except for the base.

"to_ounces=..." specifies the factor to multiply by to convert from
the base unit into the specified unit (e.g. grams to ounces).  If not
specified, will use 1/from_xxx.

"from_tons=..." specifies the conversion factor to convert from the
specified unit into the base unit (e.g. from tons to grams).  If not
specified, will use 1/to_xxx.

"common=short_tons" optionally specifies a commonly-used unit for UI
purposes.  Users may call mass.getCommonUnit() to retrieve the unit
index for this.  If not specified, will use the base unit.

Also, "rate" Measures (usually first derivatives with respect to time) 
may be defined in terms of two other measures.  Example:

[MassTransferRate]
rate=Mass/Duration
common=pounds/second

This will define a class "MassTransferRate" in terms of the Mass and
Duration classes with a similar set of patterns as above.  Examples:

MassTransferRate p = new MassTransferRate(42, Mass.POUNDS, Duration.SECONDS);
MassTransferRate q = new MassTransferRate(42, MassTransferRate.POUNDS_PER_SECOND);
double x = p.getGramsPerHour();
double y = p.getValue(MassTransferRate.GRAMS_PER_HOUR);
double z = p.getValue(Mass.GRAMS, Durations.HOURS);

