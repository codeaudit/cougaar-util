- - - - - MODULE LIST - - - - - 

The COUGAAR software distribution contains a number of separate
modules of related classes with supporting documentation and sources.

aggagent	Aggregation Agent
build		Release and build scripts, with code generators.
contract	Experimental domain-level contract code.
core		Criticial Core COUGAAR infrastructure.
glm		GenericLogisticsModel.  Currently also includes
		MilitaryLogisticsModel as well.
javaiopatch	Patch to jdk's java.io to support incremental
		persistence of Agents with Blackboards.
planserver	external world interface via http.
scalability	toolkit for scalability and performance analysis.
server	Application server for COUGAAR agents.
toolkit	Collection of utilities including configgen
		which is a society configuration tool.
tutorial	The COUGAAR tutorial.
uiframework	A generalized User interface framework.

- - - - - INTRA-MODULE ORGANIZATION - - - - - 
Each module is organized in a similar way in the source repository:

<module>/src	head of java sources for module, arranged like 
		javac would expect to see in a CLASSPATH.
	/bin	executables, scripts and support
	/data	arbitrary (static) data for runtime use.
	/doc	documentation, in text and html
		/configs  Configuration directories.  Usually contains
		only subdirectories, each is a valid configuration.
	/examples Like src, but is never shipped compiled. 
		The build process should attempt to
		compile and regression-test anything in here,
		but generated class files are never actually
		shipped. 
	/regress Unit test sources for this module.  Will be
		compiled and run by build process, reporting
		on compile, runtime and test
		failures. produced binaries are never
		installed or packaged.  test should be the
		root of a java package tree - consider
		following "junit" conventions for format.
	/test	For COUGAAR integration team use.  May contain
		additional regression tests and jigs.  Suggested
		format for organizations submitting software
		to the cougaar maintainers is a mirror of the
		top directory, aimed at integrators.  Eg:
			src/	integration sources
			doc/	integrations notes, etc
			data/
			configs/
			...
		test will not be considered by autobuilds and
		will not be (re)distributed.


- - - - - BUILD ORGANIZATION - - - - - 
This is a list of the various zip files available from releases.

cougaar.zip     		COUGAAR demo runtime - all built jar files, configs, data,
                		bin, minimum doc.
cougaar-support.zip 	All non-built supporting .jars (unpacks into "sys"
                		subdirectory where Bootstrapper will find them).
cougaar-api.zip     	the javadoc for all the main cougaar classes in one
                		place. unpacks to api/* instead of under doc as in previous
				COUGAAR releases.
*-dev.zip       		sources, docs (including javadoc) for each "public"
                		module.
md5sums.txt     		md5 checksums of all the zips.
build.out       		output of the build process 

Notes:
1. You'll need cougaar.zip and cougaar-support.zip (the first time) to get a
runnable system.  The rest are extras.  Furthermore, the cougaar-support
contents do not change very often.

2. the zips are designed to be unpacked in the same directory, e.g. on
unix:
        mkdir cougaar
        cd cougaar
        unzip /tmp/cougaar.zip
        unzip -o /tmp/cougaar-support.zip
        setenv COUGAAR_INSTALL_PATH `pwd`

3. Although the zips are intended to be installed in the same
directory, they all have a top-level file "version.txt" which contains
something like:
COMMENT = cougaar thirdparty jars
REPOSITORY_TAG = V8_2                           # branch of repository
REPOSITORY_TIME = 6/1/2001 13:00:29            # checkout time of repository
ARCHIVE_TIME = 6/1/2001 13:11:03               # zip time
All your zips should have the same REPOSITORY_TAG and REPOSITORY_TIME.
unzip will ask you if you want to overwrite version.txt -  do what you
wish.  Each generated jar file also gets this information, btw.
You can unpack all the zips into the same directory without warnings
using the right argument to unzip.  on unix "unzip -o" will do the trick.


- - - - - PACKAGE ORGANIZATION: - - - - - 

Software intended to replace core functionality should match the below
package layout (or provide detailed arguments why it should be
changed).

Software intended to augment the core and/or provide optional core
functionality, but is not intended to replace the "standard" software
suite, should mirror the above layout rooted in an
organization/project/product-specific (new) package rather than
org.cougaar.  E.g. a reimplementation of the cluster agent
(cluster/oc.cluster.ClusterImpl) which was optimized for small devices
might be delivered as part of FooCo's module as
	fooco/com.fooco.cougaar.palmtop.cluster.ClusterImpl
where:
"fooco/" is the module
"com.fooco" is the company prefix
"cougaar.palmtop" is the project's root
"cluster" is the parallel to the core's "org.cougaar.cluster" package.

None-core functionality should follow standard java package
arrangement standards and so should not interset with any core
packages.  In particular, "org.cougaar" may only be used by core
cougaar software, and use of "mil.darpa.log" may only be used on
approval. 

Package view:

(package)		(module)	(description)
org.cougaar				root of the cougaar platform.
 .lib					root of the "lib" addons
  .gss			toolkit
  .xml			toolkit
  .util			toolkit
  .param		toolkit
  .callback		toolkit
  .filter		toolkit
  .aggagent.*		aggagent
  .contract.*		contract
  .planserver.*		planserver
 .core			core		core cougaar system
  .component		core		component model
  .blackboard		core		blackboard services
  .society		core		society-level entities
  .cluster		core		agent-level entities
  .plugin		core		sub-agent-level entities
  .util			core		cougaar-related utilities.
 .util			core		java extensions
 .tools					root of separable tools
  .build		build		
  .scalability		scalability
  .server		server
 .domain				root of problem domains
  .planning.*		core		Generic planning
  .glm.*		glm		Generic Logistics
  .mlm.*		glm		Military Logistics


Notes:
- Complex domain-defining packages should follow the following
layout:
	..domain	Core domain objects
	    .lp		logic providers
	    .plan	"plan" objects
	    .asset	Assets and PGs
	    .plugin	domain-level plugins (usually base classes)
	    .*		anything else that is appropriate to the
			specific domain (e.g. policy, oplan, etc).

- org.cougaar.tools, org.cougaar.lib, and org.cougaar.domain are just
deeper package roots: modules with symbols in tools should be
completely rooted below tools (e.g. scalability) .
	oc.lib is a package to hold (only) subpackages which are to be
		used by other consumers - e.g. utility base classes
		and libraries of (cougaar-specific) functionality.
		Most of the initial contents of lib is legacy code
		contributed to cougaar during earlier release cycles.
	
	oc.tools is a package to hold subpackages which implement
		various high-level facilities, usually not used
		directly by any other modules/packages/etc.  E.g
		Scalability toolkit.

	oc.domain is a package to hold subpackages which implement
		alternate problem domains.
