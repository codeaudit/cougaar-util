- - - - - BUILD ORGANIZATION - - - - - 

This is a list of the various zip files available from releases.

cougaar.zip           Cougaar runtime - all "lib/" jar files,
                      scripts, configuration files, and minimum
                      documentation.
cougaar-support.zip   Third-party supporting jar files.  Unpacks
                      into "sys/" subdirectory where Bootstrapper
                      will find them.
cougaar-api.zip       The javadoc for all the main cougaar classes
                      in one place.  Unpacks to the local directory,
                      so you may wish to create a separate "api/"
                      directory.
cougaar-src.zip       Source code for each "lib/" module.  Unpacks
                      to the local directory, so you may wish to
                      create a separate "src/" directory.
md5sums.txt           MD5 checksums for all the above zips.
build.out             Output of the build process 
errors.out            Error output of the build process, including
                      deprecation warnings.

Notes:

1. You'll need cougaar.zip and cougaar-support.zip (the first time)
   to get a runnable system.  The rest are extras.  Furthermore, the
   cougaar-support contents do not change very often.

2. The zips are designed to be unpacked in the same directory, e.g.
   on UNIX:
       mkdir cougaar
       cd cougaar
       unzip /tmp/cougaar.zip
       unzip /tmp/cougaar-support.zip
       setenv COUGAAR_INSTALL_PATH `pwd`

3. The zips include version information in their respective
   "Manifest/" directories.  The content looks something like:
       NAME=cougaar-support
       COMMENT=cougaar thirdparty jars
       REPOSITORY_TAG=V10_0                 # CVS branch
       REPOSITORY_TIME=1/28/2003 13:00:08   # CVS checkout time
       ARCHIVE_TIME=1/28/2003 13:29:27      # zip time
   All your zips should have the same REPOSITORY_TAG and
   REPOSITORY_TIME.  Each generated "lib/*.jar" file also contains
   its version information.

- - - - - MODULE LIST - - - - - 

The Cougaar software distribution (cougaar.zip) contains a number of
separate modules of related classes with supporting documentation and
sources.

These modules, which correspond to "lib/*.jar" files, are listed in
approximate order of compilation dependency:

  build            Release and build scripts, with code generators.
  javaiopatch      Patch to jdk's java.io to support incremental
                   persistence of Agents with Blackboards.
  bootstrap        Class loader that scans "lib/*.jar" and "sys/*.jar"
  util             Utility code, including the Cougaar Component Model
                   and Log4j logging facility.
  core             Criticial Core Cougaar infrastructure.
  planning         Planning domain for Tasks, Assets, etc.
  contract         Experimental predicate language.
  toolkit          Collection of utilities including configgen
                   which is a society configuration tool.
  yp               Yellow pages directory naming service (UDDI).
  glm              Generic Logistics Model domain.  Currently also
                   includes the Military Logistics Model domain.
  scalability      Toolkit for scalability and performance analysis.
  aggagent         Agent that aggregates data from multiple remote
                   agents.
  vishnu           Optimizing transportation scheduler.
  datagrabber      TPDFF transportation schedule viewer.
  uiframework      A generalized User interface framework.
  blackjack        Military supply support.
  tutorial         The Cougaar tutorial.
  csmart           Cougaar configuration and experimentation UI.
  quo              Quality of Objects support (metrics).
  qos              Quality of Service support.
  server           Application server to launch Cougaar nodes.
  manager          Agent health checking and restart manager.
  webserver        Servlet service support excluding the server
                   itself.
  webtomcat        Tomcat servlet server implementation for use by
                   webserver module.
  community        Agent peer group support.
  albbn            BBN military inventory and transportation support.
  alsra            SRA military demand projection support.
  stoplight        Military supply UI.
  servicediscovery Agent discovery using the yellow pages.

- - - - - INTRA-MODULE ORGANIZATION - - - - - 

Each module is organized in a similar way in the source repository:

<module>/build.xml ANT compilation script.
        /src       Head of java sources for module, arranged like
                   javac would expect to see in a CLASSPATH.
        /bin       Executables, scripts and support
        /data      Arbitrary (static) data for runtime use.
        /doc       Documentation, in text and html
        /configs   Configuration directories.  Usually contains
                   only subdirectories, each is a valid
                   configuration.
        /examples  Like src, but is never shipped compiled. 
                   The build process should attempt to
                   compile and regression-test anything in here,
                   but generated class files are never actually
                   shipped. 
        /regress   Unit test sources for this module.  Will be
                   compiled and run by build process, reporting
                   on compile, runtime and test failures. produced
                   binaries are never installed or packaged.  test
                   should be the root of a java package tree -
                   consider following "junit" format conventions.
        /test      For Cougaar integration team use.  May contain
                   additional regression tests and jigs.  Suggested
                   format for organizations submitting software
                   to the cougaar maintainers is a mirror of the
                   top directory, aimed at integrators.  Eg:
                         src/    integration sources
                         doc/    integrations notes, etc
                         data/
                         configs/
                         ...
                   test will not be considered by autobuilds and
                   will not be (re)distributed.
 
- - - - - PACKAGE ORGANIZATION: - - - - - 

Software intended to replace core functionality should match the below
package layout (or provide detailed arguments why it should be
changed).

Software intended to augment the core and/or provide optional core
functionality, but is not intended to replace the "standard" software
suite, should mirror the above layout rooted in a new
"organization/project/product-specific" package rather override
the core's "org.cougaar" package names.  For example, an
alternate implementation of the agent base class
    core/org.cougaar.core.agent.SimpleAgent
which was optimized for small devices might be delivered as part of
company "foo"'s module as
    fooco/com.foo.cougaar.palmtop.agent.EmbeddedAgent
where:
    "fooco/" is the module
    "com.foo." is the company package prefix
    "cougaar.palmtop." is the project's root
    "agent" is the parallel to the core's package.
    "EmbeddedAgent" is the class name

None-core functionality should follow standard java package
arrangement standards and so should not interset with any core
packages.  In particular, "org.cougaar" may only be used by core
cougaar software, and use of "mil.darpa.log" may only be used on
approval. 

The current package map is documented in the latest "ReleaseNotes/"
directory, such as this Cougaar 10.0 package map:
   doc/ReleaseNotes/10.0/PackageMap.html

