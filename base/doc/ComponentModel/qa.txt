>From: "Rosset, Sebastien" <Sebastien_Rosset@NAI.com>
>* Could you be more specific about the BlackboardBindingSite API? Are you
>talking about some of the methods of the PlugInAdapter class (subscribe,
>publishAdd, publishRemove, publishChange...) or some functions deeper in the
>infrastructure (Blackboard or LogPlan methods...)?

The BlackboardBindingSite interface is exactly the publish and
subscribe API (with transactions).  Deeper infrastructure stuff must
be private, as it is in ALP.

>* If the BlackboardBindingSite is a wrapper around the ALPplan LogPlan API,
>other infrastructure services above this binding site may have to be
>modified. Some of these services may effectively by-pass the security
>mechanisms provided by the blackboard binder. In particular, the
>distributor: 1) accepts envelopes from PlugIns, distribute them to the Log
>Plan (this is where the Blackboard binder would do the access mediation), 2)
>then distribute envelopes to all subscribers that might be interested in the
>change. The second part may by-pass the blackboard binder if the distributor
>does not perform an access check.

The interactions between Distributer and *Plan classes are unrelated
to the BlackboardBindingSite api.  IMO, the Blackboard *is* the
combination of Distributer and Blackboard.  The interactions between
LogicProviders and Blackboard (e.g. XPlans) should be governed by a
different service which should not be available to Plugins.

A given binder gets at most two chances to influence the outcome of a
method call (on its BindingSite) - once on method entry, and once just
before returning control to the caller.  One of the things that a
ContainmentBinder can do is wrap any other bindingsite requested by
the contained plugin, allowing the "parent" component the option to
mediate all interactions between a plugin and all other services.

In your example above, the simplest case (ignoring the container's
option to wrap the real BlackboardBindingSite) would be that the
plugin makes a call to the BlackboardBinder before the distributer
sees it.  The envelope would probably then be processed by the logplan
(another option for mediation) before being distributed to the rest of
the plugins, via their associated BlackboardBinders.

>* I think it is necessary to have a binding site which is the
>publish/subscribe API. The distributor may also have a binder. It is the
>composition of these binders that provides secure access to the log plan.

Yes - the BlackboardBindingSite is the publish/subscribe API.  The
distributer is just one part of the Blackboard, though there are
(potentially) binders between the Blackboard and XPlans/LPs.

>* I think SecurityBindingSite is too generic. In fact, most of the binders
>offer security mechanims. What about CryptoBindingSite? There might be
>binding sites for dealing with keys, certificates, encryption, etc.

This was mostly intended to be a placeholder... I like
CryptoBindingSite as a better name.  I'm a little concerned about
breaking the services up into so many parts - I would think a single
Security Services access point (a "security manager") which delegates
to a suite of mini services might have some advantages.

- - - - 

>From: "Rosset, Sebastien" <Sebastien_Rosset@NAI.com>
>Cc: NAILABS Ultra*Log Project <ultralog@NAI.com>
>Subject: technical questions on Cougaar

>Marshall,
>We are designing a generic access control mechanism for Cougaar and we are
>trying to figure out how we could implement it. We think that it is
>necessary to do access control on the following functions:
>*       publishAdd
>*       publishRemove
>*       publishChange
>*       subscribe
>
>Of course, we want to perform access control on other operations, but I want
>to focus on the log plan in this e-mail.
>
>We would like to be able to raise security exceptions each time one of these
>functions is called. Since a lot of things happen asynchronously in Cougaar,
>we wanted to verify that it is actually possible to raise exceptions during
>the call, not much later.
>
>We have reversed-engineered Cougaar 7.0 in Rational Rose and we have created
>an activity diagram that represents the workflow of activities when a PlugIn
>invokes the publishAdd() method. We also have a class diagram with most of
>the classes involved in object storage in the log plan. This is available
>from the FTP site in HTML format, under uploads/UML. I've also put the rose
>model.
>
>We have several questions:
>*       What is the container model of the log plan? We do not understand
>exactly how objects end up in the log plan. More precisely, we can follow
>the flow of activities when publishAdd is called up to the ALPplan and logic
>providers, but we never see such a thing as actually including the new
>object in a the log plan container.
>*       If you add a swimlane for the log plan in the activity diagram that
>we built, what are the activities that occur in the log plan and how do they
>relate with other activities?
>*       What entity is storing objects when a PlugIn calls publishAdd?
>ALPplan, logPlan, the PlugIn itself? (in-memory storage, not persistent
>storage)
>*       Is there a logic provider that specifically deals with data storage
>(again, in-memory storage)?
>*       Let's say there is a bug in a PlugIn. The PlugIn publishes some
>elements, the bug occurs, and the exception is caught in the execute method
>of the SimplePlugIn class. The PlugIn is terminated. Do published elements
>and their relationships still exist in the Log Plan?
>*       What are Blackboard subscriptions and how do they relate to PlugIn
>subscriptions?
>*       When a PlugIn publishes something in the log plan, is there always
>an object stored in the log plan, or can the object be moved directly to
>another location (e.g. remote log plan), without ever creating an object or
>a reference in the log plan?
